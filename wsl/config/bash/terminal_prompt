#!/bin/bash
# This script provides a dynamic prompt ONLY for VS Code / Cursor terminals.
# It checks the environment and will do nothing if it's not in VS Code,
# preventing conflicts with other prompt managers like Oh My Posh.

# Check if we are running inside a VS Code or Cursor integrated terminal.
# If the TERM_PROGRAM variable is not 'vscode', then exit this script immediately.
if [ "$TERM_PROGRAM" != "vscode" ]; then
    return 0 # 'return' is safer than 'exit' when sourcing a file.
fi

# --- The rest of the script will ONLY run if we are inside VS Code / Cursor ---

# This function builds and sets the PS1 variable dynamically.
dynamic_vscode_prompt() {
    local exit_code=$? # Capture the exit code of the last command.

    # Part 1: Virtual Environment
    local venv_prompt=""
    if [ -n "$VIRTUAL_ENV" ]; then
        venv_prompt="\[\033[0;33m\]($(basename "$VIRTUAL_ENV")) "
    fi

    # Part 2: User, Host, and Exit Code Color
    local userpart="\[\033[0;32m\]\u@\h"
    if [ "$exit_code" -ne "0" ]; then
        userpart+="\[\033[1;31m\]:" # Red colon for error
    else
        userpart+="\[\033[0m\]:" # Normal colon for success
    fi

    # Part 3: Git Branch and Status
    local gitbranch=""
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        local BRANCH
        BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)
        if [ -n "$BRANCH" ]; then
            gitbranch=" \[\033[0;36m\](\[\033[1;31m\]${BRANCH}"
            if ! git diff-index --quiet HEAD --; then
                gitbranch+=" \[\033[1;33m\]âœ—"
            fi
            gitbranch+="\[\033[0;36m\])"
        fi
    fi

    # Final Assembly of the PS1 string
    PS1="${venv_prompt}${userpart}\[\033[01;34m\]\w${gitbranch}\[\033[00m\]\$ "
}

# Tell Bash to run our function before displaying each new prompt.
PROMPT_COMMAND=dynamic_vscode_prompt
export PROMPT_DIRTRIM=4